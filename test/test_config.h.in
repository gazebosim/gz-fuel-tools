/*
 * Copyright (C) 2017 Open Source Robotics Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/

#ifndef IGNITION_FUEL_TOOLS_TEST_CONFIG_HH_
#define IGNITION_FUEL_TOOLS_TEST_CONFIG_HH_

#define PROJECT_SOURCE_PATH "${PROJECT_SOURCE_DIR}"
#define PROJECT_BINARY_PATH "${PROJECT_BINARY_DIR}"
#define IGNITION_FUEL_TOOLS_LIBRARY_PATH "${PROJECT_BINARY_DIR}/src"
#define TEST_PATH "${PROJECT_SOURCE_DIR}/test"

#include <climits>
#include <cstdio>
#include <fstream>
#include <iostream>
#include <random>
#include <string>

#include "gtest/gtest.h"

#include "ignition/fuel_tools/config.hh"
#include "ignition/fuel_tools/Helpers.hh"

#include "ignition/common/Filesystem.hh"
#include "ignition/common/Util.hh"

namespace ignition
{
  namespace fuel_tools
  {
    namespace testing
    {
      /// \brief Method to retrieve root directory of project source
      ///
      /// This is used to get various test files
      /// \param[inout] _sourceDir Full path to the source directory
      /// \return True if directory is set correctly, false otherwise
      bool ProjectSourcePath(std::string &_sourceDir)
      {
        // Bazel builds set TEST_SRCDIR
        if (common::env("TEST_SRCDIR", _sourceDir))
        {
          _sourceDir = common::joinPaths(
              _sourceDir, "__main__", "ign_common");
          return true;
        }
        else
        {
          // CMake builds set PROJECT_SOURCE_DIR
          _sourceDir = "${PROJECT_SOURCE_DIR}";
          return true;
        }
      }

      /// \brief Method to retrieve temporary directory for test outputs
      ///
      /// \param[inout] _tmpDir Full path to the temp directory
      /// \return True if directory is set correctly, false otherwise
      bool TestTmpPath(std::string &_tmpDir)
      {
        // Bazel builds set TEST_UNDECLARED_OUTPUTS_DIR
        if (common::env("TEST_UNDECLARED_OUTPUTS_DIR", _tmpDir))
        {
          return true;
        }
        else
        {
          _tmpDir = common::joinPaths("${PROJECT_BINARY_DIR}", "tmp");
          return true;
        }
      }

      /// \brief Method to retrieve temporary home directory for tests
      ///
      /// This will update the contents of the home directory path variable
      /// (HOME on Linux/MacOS, HOMEPATH on Windows) to this newly-set
      /// directory
      /// This additionally sets the HOME and HOMEPATH environment variables
      ///
      /// \param[inout] _homeDir Full path to the home directory
      /// \return True if directory is set correctly, false otherwise
      bool TestSetHomePath(std::string &_homeDir)
      {
        if (common::env("TEST_UNDECLARED_OUTPUTS_DIR", _homeDir))
        {
          return ignition::common::setenv(IGN_HOMEDIR, _homeDir);
        }
        else
        {
          if (TestTmpPath(_homeDir))
          {
            // Set both for linux and windows
            return ignition::common::setenv(IGN_HOMEDIR, _homeDir);
          }
          else
          {
            return false;
          }
        }
      }

      /// \brief Retrieve a file from the project source directory
      /// \param[in] variable length of arguments relative to the
      ///   repository source directory
      /// \return Full path to requested file
      template <typename... Args>
      std::string SourceFile(Args const &... args)
      {
        std::string dataDir;
        ProjectSourcePath(dataDir);
        return common::joinPaths(dataDir, args...);
      }

      /// \brief Retrieve a file from the test directory
      /// \param[in] variable length of arguments relative to the
      ///   repository test directory
      /// \return Full path to requested test file
      template <typename... Args>
      std::string TestFile(Args const &... args)
      {
        return SourceFile("test", args...);
      }

      /// \brief Retrieve a file from the project temporary directory
      /// \param[in] variable length of arguments relative to the
      ///   temporary test directory
      /// \return Full path to requested file
      template <typename... Args>
      std::string TempPath(Args const &... args)
      {
        std::string dataDir;
        TestTmpPath(dataDir);
        return common::joinPaths(dataDir, args...);
      }

    }
  }
}



namespace testing
{
#ifdef _WIN32
  using forkHandlerType = PROCESS_INFORMATION;
#else
  using forkHandlerType = pid_t;
#endif

  /// \brief create a new process and run command on it. This function is
  /// implementing the creation of a new process on both Linux (fork) and
  /// Windows (CreateProcess) and the execution of the command provided.
  /// \param[in] command The full system path to the binary to run into the
  /// new process.
  /// \return On success, the PID of the child process is returned in the
  /// parent, an 0 is returned in the child. On failure, -1 is returned in the
  /// parent and no child process is created.
  forkHandlerType forkAndRun(const char *_command, const char *_partition)
  {
#ifdef _WIN32
    STARTUPINFO info= {sizeof(info)};
    PROCESS_INFORMATION processInfo;

    char cmd[500];
    ign_strcpy(cmd, _command);
    ign_strcat(cmd, " ");
    ign_strcat(cmd, _partition);

    if (!CreateProcess(NULL, const_cast<LPSTR>(cmd), NULL, NULL,
          TRUE, 0, NULL, NULL, &info, &processInfo))
    {
      std::cerr << "CreateProcess call failed" << std::endl;
    }

    return processInfo;
#else
    pid_t pid = fork();

    if (pid == 0)
    {
      if (execl(_command, _command, _partition,
            reinterpret_cast<char *>(0)) == -1)
      {
        std::cerr << "Error running execl call: " << _command << std::endl;
      }
    }

    return pid;
#endif
  }

  /// \brief Wait for the end of a process and handle the termination
  /// \param[in] pi Process handler of the process to wait for
  /// (PROCESS_INFORMATION in windows or forkHandlerType in UNIX).
  void waitAndCleanupFork(const forkHandlerType pi)
  {
#ifdef _WIN32
    // Wait until child process exits.
    WaitForSingleObject(pi.hProcess, INFINITE);

    // Close process and thread handler.
    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);
#else
    // Wait for the child process to return.
    int status;
    waitpid(pi, &status, 0);
    if (status == -1)
      std::cerr << "Error while running waitpid" << std::endl;
#endif
  }

  /// \brief Send a termination signal to the process handled by pi.
  /// \param[in] pi Process handler of the process to stop
  /// (PROCESS_INFORMATION in windows or forkHandlerType in UNIX).
  void killFork(const forkHandlerType pi)
  {
#ifdef _WIN32
    // TerminateProcess return 0 on error
    if (TerminateProcess(pi.hProcess, 0) == 0)
      std::cerr << "Error running TerminateProcess: " << GetLastError();
#else
    kill(pi, SIGTERM);
#endif
  }

  /// \brief Get a random number based on an integer converted to string.
  /// \return A random integer converted to string.
  std::string getRandomNumber()
  {
    // Initialize random number generator.
    uint32_t seed = std::random_device {}();
    std::mt19937 randGenerator(seed);

    // Create a random number based on an integer converted to string.
    std::uniform_int_distribution<int32_t> d(0, INT_MAX);

    return std::to_string(d(randGenerator));
  }

  // The fixture for testing classes.
  class FileParserUtils : public ::testing::Test
  {
    /// \brief Code here will be called immediately after the constructor
    /// (right before each test).
    virtual void SetUp()
    {
      this->fileName = getRandomNumber() + ".txt";
    }

    /// \brief Code here will be called immediately after each test
    /// (right before the destructor).
    virtual void TearDown()
    {
      if (this->testFile.is_open())
        this->testFile.close();
      std::remove(this->fileName.c_str());
    }

    /// \brief Populate the temporary file.
    /// \param[in] _content File content.
    protected: void PopulateFile(const std::string &_content)
    {
      if (this->testFile.is_open())
        this->testFile.close();

      this->testFile.open(this->fileName);
      this->testFile << _content << std::endl;
    }

    /// \brief The name of the test file created.
    protected: std::string fileName;

    /// \brief If file content is not empty, its value will be used to populate
    /// a text file and check some parser functions.
    protected: std::string fileContent = "";

    /// \brief A test file.
    protected: std::ofstream testFile;
  };
}

#endif  // header guard
